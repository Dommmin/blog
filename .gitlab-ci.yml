# .gitlab-ci.yml

# Define the stages of our pipeline
stages:
  - test
  - build
  - deploy

# Define variables that will be available to all jobs
variables:
  PHP_VERSION: "8.4"
  NODE_VERSION: "22"
  COMPOSER_NO_INTERACTION: 1
  COMPOSER_ALLOW_SUPERUSER: 1

# Cache configuration for faster builds
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - vendor/
    - node_modules/
    - .npm/

# Define the test job
test:
  stage: test
  image: php:8.4-fpm
  services:
    - mysql:8.0
  variables:
    MYSQL_DATABASE: laravel_test
    MYSQL_ROOT_PASSWORD: password
  before_script:
    # Install system dependencies
    - apt-get update && apt-get install -y git zip unzip libzip-dev libpng-dev libonig-dev libxml2-dev
    - docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd zip
    # Install Composer
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    # Install Node.js
    - curl -fsSL https://deb.nodesource.com/setup_22.x | bash -
    - apt-get install -y nodejs
    # Setup project
    - cp .env.testing .env
    - composer install --prefer-dist --no-progress
    - npm ci
  script:
    # Run code quality checks
    - composer larastan
    - composer pint
    - npm run format
    - npm run types
    - npm run lint
    # Build assets
    - npm run build
    # Generate config
    - php artisan ziggy:generate
    # Run tests
    - php artisan test
  artifacts:
    paths:
      - vendor/
      - node_modules/
    expire_in: 1 week

# Define the build job
build:
  stage: build
  image: php:8.4-fpm
  needs:
    - test
  before_script:
    # Install system dependencies
    - apt-get update && apt-get install -y git zip unzip libzip-dev libpng-dev libonig-dev libxml2-dev
    - docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd zip
    # Install Composer
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    # Install Node.js
    - curl -fsSL https://deb.nodesource.com/setup_22.x | bash -
    - apt-get install -y nodejs
    # Setup project
    - echo "$ENV_FILE" > .env
    - composer install --optimize-autoloader --no-dev --prefer-dist --no-interaction --no-progress
    - npm ci
    - npm install -g dotenv-cli
  script:
    # Generate config
    - php artisan ziggy:generate
    # Build assets
    - dotenv -e .env -- npm run build:ssr
    # Create release archive
    - |
      mkdir release
      shopt -s extglob
      cp -r !(release|.git|tests|node_modules|release.tar.gz) release/
      tar -czf release.tar.gz -C release .
      rm -rf release
  artifacts:
    paths:
      - release.tar.gz
    expire_in: 1 day

# Define the deploy job
deploy:
  stage: deploy
  image: alpine:latest
  needs:
    - build
  before_script:
    # Install SSH client
    - apk add --no-cache openssh-client
    # Setup SSH
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    # Upload release
    - scp -P $SSH_PORT release.tar.gz $SSH_USER@$SSH_HOST:/home/$SSH_USER/laravel/
    # Upload environment file
    - echo "$ENV_FILE" > .env
    - scp -P $SSH_PORT .env $SSH_USER@$SSH_HOST:/home/$SSH_USER/laravel/shared/.env
    # Run deployment script
    - scp -P $SSH_PORT deploy.sh $SSH_USER@$SSH_HOST:/home/$SSH_USER/laravel/
    - ssh -p $SSH_PORT $SSH_USER@$SSH_HOST "bash /home/$SSH_USER/laravel/deploy.sh"
  environment:
    name: production
    url: https://your-domain.com
  only:
    - main